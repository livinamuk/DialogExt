<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<!-- If displayed in VS -->
		<_PropertySheetDisplayName>Fusion SDK Properties</_PropertySheetDisplayName>
	</PropertyGroup>
	<PropertyGroup Label="UserMacros">
		<!-- MultiPlatform targeting -->
		<_TargetPlat>$(TargetPlatformIdentifier)</_TargetPlat>
		<_TargetPlat Condition="$(_TargetPlat)==''">Windows</_TargetPlat>
		<ExtName>$(ProjectName.Split('.')[0])</ExtName>
		<TargetArch>x86</TargetArch>
		<TargetArch Condition="'$(TargetArchAbi)'!=''">$(TargetArchAbi)</TargetArch>

		<DbgBuild>0</DbgBuild>
		<RelBuild>0</RelBuild>
		<EditorBuild>0</EditorBuild>
		<RuntimeBuild>0</RuntimeBuild>
		<UniBuild>0</UniBuild>

		<DbgBuild Condition="$(Configuration.StartsWith('Debug'))">1</DbgBuild>
		<RelBuild Condition="$(DbgBuild)==0">1</RelBuild>
		<!-- Editor build only possible on Windows.
			 It's an editor build if Edittime or Debug build, on Windows. -->
		<EditorBuild Condition="$(_TargetPlat)=='Windows' AND ($(DbgBuild)==1 OR $(Configuration.StartsWith('Edittime')))">1</EditorBuild>
		<RuntimeBuild Condition="$(Configuration.StartsWith('Runtime')) OR $(_TargetPlat)!='Windows'">1</RuntimeBuild>
		<UniBuild Condition="$(Configuration.EndsWith('Unicode'))">1</UniBuild>

		<!-- Unicode path feature -->
		<UnicodeOrBlank></UnicodeOrBlank>
		<UnicodeOrBlank Condition="$(UniBuild)==1">\Unicode</UnicodeOrBlank>

		<!-- Not really needed for DarkEdif, it puts all languages in one MFX. -->
		<LangSuffix Condition="$(Configuration.Contains('French'))">_FR</LangSuffix>
		<LangSuffix Condition="$(Configuration.Contains('Japanese'))">_JP</LangSuffix>

		<!-- Roundtrip date/time format, can be parsed back -->
		<BuildDate>$([System.DateTime]::Now.ToString('o'))</BuildDate>
		<!-- Just the year, used in copyright output -->
		<Year>$([System.DateTime]::Now.Year)</Year>

		<!-- For ..\Inc and ..\Lib; OpenCV is in two levels of subfolders. -->
		<SDKRootFolder>..</SDKRootFolder>
		<SDKRootFolder Condition="$(ProjectDir.Contains('OpenCV'))">..\..\..</SDKRootFolder>
		<!--<SDKRootFolder>$([System.IO.Path]::GetFullPath('$(SDKRootFolder)'))</SDKRootFolder>-->

		<SDKType Condition="exists('$(ProjectDir)\DarkExt.json')">DarkEdif</SDKType>
		<SDKType Condition="$(SDKType)=='' AND exists('$(ProjectDir)\Ext.json')">Edif</SDKType>
		<SDKType Condition="$(SDKType)=='' AND exists('$(ProjectDir)\$(SDKRootFolder)\Inc\MagicRData.h')">RSDK</SDKType>
		<SDKType Condition="$(SDKType)==''">MMF2SDK</SDKType>

		<MakePDB>0</MakePDB>
		<MakePDB Condition="$(DbgBuild)==1 OR $(ProjectDir.Contains('DebugObject'))">1</MakePDB>

		<!-- For use to make sure the user set up their template metadata properly. -->
		<IsTemplate Condition="$(ProjectDir.ToLower().Contains('\$(SDKType.ToLower()) template\'))">1</IsTemplate>

		<!-- Write intermediate and output files to an easily deleted/git-ignored folder. -->
		<_FusionSDKTempDir>$(SolutionDir)Temp\$(ExtName)\$(_TargetPlat)\$(Configuration)\$(TargetArch)</_FusionSDKTempDir>

		<!-- If user has enabled DarkEdif FusionDebugger class inside their Extension.
			 Note, this also is defined in Android builds and so forth, to allow no-op FusionDebugger functions. -->
		<DarkEdif_FusionDebugger>0</DarkEdif_FusionDebugger>
		<!-- If user has enabled DarkEdif Update Checker inside their Extension. -->
		<DarkEdif_UpdateChecker>0</DarkEdif_UpdateChecker>
	</PropertyGroup>
	<!-- Fusion SDK settings. Sets user preferences. -->
	<PropertyGroup>
		<_FusionSDKConfig Condition="exists('$(ProjectDir)\..\..\FusionSDKConfig.ini')">$([System.IO.File]::ReadAllText('$(ProjectDir)\..\..\FusionSDKConfig.ini'))</_FusionSDKConfig>

		<!-- These are Fusion SDK settings that are needed by the build process, not post-build. -->

		<!-- MakePDBDuringReleaseBuild = true
			 If set to true, will generate _Full and stripped PDB during Edittime and Runtime compilations.
			 Starting "(?im)" sets regex matching to case-insensitive, multiline. -->
		<_MakePDBRegex><![CDATA[(?im)^MakePDBDuringReleaseBuild\s*=\s*true\s*?$]]></_MakePDBRegex>
		<MakePDB Condition="$(MakePDB)==0 AND
			$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_MakePDBRegex)).Success)">1</MakePDB>

		<!-- WindowsXPCompatibility = true|false
			 If set to true, uses Windows XP compatibility if available. -->
		<_WindowsXPCompatibilityRegex><![CDATA[(?im)^WindowsXPCompatibility\s*=\s*false\s*?$]]></_WindowsXPCompatibilityRegex>
		<WindowsXPCompatibility>0</WindowsXPCompatibility>
		<!-- Yep, XP compatible pack is installed. If VS accidentally picks VS 2019 compiler, VCTargets will point to "...\v160\", so
			 we hop up a folder and pick VS 2017 (v150) directly, as the XP compatible pack is VS 2017-based. -->
		<WindowsXPCompatibility Condition="Exists('$(VCTargetsPath)\..\v150\Platforms\Win32\PlatformToolsets\v141_xp\Toolset.props')">1</WindowsXPCompatibility>
		<WindowsXPCompatibility Condition="$(WindowsXPCompatibility)==1 AND
			$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_WindowsXPCompatibilityRegex)).Success)">0</WindowsXPCompatibility>

		<!-- RunStaticCodeAnalysis = true|debugonly
			 If set to true, will cause all settings to be adjusted to run static analysis; including
			 dropping Windows XP compiler, setting MFX output to DLL, etc. Not to be used for releases,
			 but as an in-between to scan your code.
			 DebugOnly will instead only run analysis on Debug/Debug Unicode builds. -->
		<_RunAnalyzerRegex><![CDATA[(?im)^RunStaticCodeAnalysis\s*=\s*([a-z]+)\s*?$]]></_RunAnalyzerRegex>
		<RunAnalyzerSetting Condition="$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_RunAnalyzerRegex)).Success)"
			>$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_RunAnalyzerRegex)).Result('$1'))</RunAnalyzerSetting>

		<!-- RunCodeAnalysis is the property MSVC will read. -->
		<RunCodeAnalysis Condition="$(RunAnalyzerSetting)=='true' OR ($(RunAnalyzerSetting)=='debugonly' AND $(DbgBuild)==1)">true</RunCodeAnalysis>

		<!-- Static analysis won't run on the XP-compatible toolset. -->
		<WindowsXPCompatibility Condition="$(RunCodeAnalysis)=='true'">0</WindowsXPCompatibility>

		<!-- UseLinkTimeCodeGeneration = true|false
			 Will enable Whole Program Optimisation/Link Time Code Generation on the destination projects.
			 This will further optimise the code's speed, possibly making it larger, or smaller.
			 Most effective when multiple libraries are in use by your extension. -->
		<_UseLinkTimeCodeGenerationRegex><![CDATA[(?im)^UseLinkTimeCodeGeneration\s*=\s*true\s*?$]]></_UseLinkTimeCodeGenerationRegex>
		<UseLinkTimeCodeGeneration>0</UseLinkTimeCodeGeneration>
		<UseLinkTimeCodeGeneration Condition="$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_UseLinkTimeCodeGenerationRegex)).Success)">1</UseLinkTimeCodeGeneration>

		<!-- FavorSpeedOrSize = speed|size|size_redist
			 size_redist is like size, but adds a VS Redistributable dependency. -->
		<_FavorSizeOrSpeedRegex><![CDATA[(?im)^FavorSizeOrSpeed\s*=\s*((?:speed)|(?:size(?:_redist)?))\s*?$]]></_FavorSizeOrSpeedRegex>
		<FavorSizeOrSpeed>speed</FavorSizeOrSpeed>
		<FavorSizeOrSpeed Condition="$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_FavorSizeOrSpeedRegex)).Success)"
			>$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_FavorSizeOrSpeedRegex)).Result('$1'))</FavorSizeOrSpeed>

		<!-- EchoAllDefinesFromPropsFileDuringBuild = true
			 If set to true, will write all /D preprocessor to output window when you compile.
			 Used for debugging FusionSDK.props only. -->
		<_EchoAllDefinesFromPropsFileDuringBuildRegex><![CDATA[(?im)^EchoAllDefinesFromPropsFileDuringBuild\s*=\s*true\s*?$]]></_EchoAllDefinesFromPropsFileDuringBuildRegex>
		<EchoAllDefinesFromPropsFileDuringBuild Condition=
			"$([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_EchoAllDefinesFromPropsFileDuringBuildRegex)).Success)">1</EchoAllDefinesFromPropsFileDuringBuild>

		<!-- UseMultiProcessorCompilationInDebug = true
			 If set to true, will use multi-processor compilation, disabling incremental rebuild,
			 editing while debugging, etc. See config file.
			 Using multiple processors is enabled by default in non-Debug builds. -->
		<_UseMultiProcessorRegex><![CDATA[(?im)^UseMultiProcessorCompilationInDebug\s*=\s*true\s*?$]]></_UseMultiProcessorRegex>
		<_UseMultiProcessor Condition=
			"$(RelBuild)==1 OR $([System.Text.RegularExpressions.Regex]::Match($(_FusionSDKConfig), $(_UseMultiProcessorRegex)).Success)">1</_UseMultiProcessor>
	</PropertyGroup>
	<PropertyGroup Condition="$(SDKType.Contains('Edif'))" Label="UserMacros">
		<_JSON Condition="$(SDKType)=='DarkEdif'">$([System.IO.File]::ReadAllText('$(ProjectDir)\DarkExt.json'))</_JSON>
		<_JSON Condition="$(SDKType)=='Edif'">$([System.IO.File]::ReadAllText('$(ProjectDir)\Ext.json'))</_JSON>

		<!-- Find the line where Extension::Version is defined, read number -->
		<_ExtVersionRegex><![CDATA[Version\s*=\s*(\d*);]]></_ExtVersionRegex>
		<ExtVersion Condition="!$(ProjectDir.Contains('Bluewing'))">$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(ProjectDir)Extension.h')), $(_ExtVersionRegex)).Result('$1'))</ExtVersion>

		<_ExtVersionRegex><![CDATA[relayclient[^}]*?buildnum\s*=\s*(\d*);]]></_ExtVersionRegex>
		<ExtVersion Condition="$(ProjectDir.Contains('Bluewing Client'))">$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(ProjectDir)\$(SDKRootFolder)\Lib\Shared\Lacewing\Lacewing.h')), $(_ExtVersionRegex)).Result('$1'))</ExtVersion>
		<_ExtVersionRegex><![CDATA[relayserver[^}]*?buildnum\s*=\s*(\d*);]]></_ExtVersionRegex>
		<ExtVersion Condition="$(ProjectDir.Contains('Bluewing Server'))">$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(ProjectDir)\$(SDKRootFolder)\Lib\Shared\Lacewing\Lacewing.h')), $(_ExtVersionRegex)).Result('$1'))</ExtVersion>

		<!-- Find the first Author line in JSON, read its value.
			 Starting "(?im)" sets regex matching to case-insensitive, multiline. -->
		<_AuthorNameRegex><![CDATA[(?im)"Author"\s*:\s*"(.*)"\s*?,\s*$]]></_AuthorNameRegex>
		<AuthorName>$([System.Text.RegularExpressions.Regex]::Match($(_JSON), $(_AuthorNameRegex)).Result('$1'))</AuthorName>

		<!-- Use Author Name if company isn't found -->
		<_CompanyNameRegex><![CDATA[(?im)"Company"\s*:\s*"(.*)"\s*?,\s*$]]></_CompanyNameRegex>
		<_ExtH>$([System.IO.File]::ReadAllText('$(ProjectDir)\Extension.h'))</_ExtH>
		<CompanyName Condition="$(_JSON.Contains('CompanyName'))">$([System.Text.RegularExpressions.Regex]::Match($(_ExtH), $(_CompanyNameRegex)).Result('$1').Replace('\'', '\u0027'))</CompanyName>
		<CompanyName Condition="$(CompanyName)==''">$(AuthorName)</CompanyName>

		<!-- This define is true if FusionDebugger variable is detected in Extension.h, it's true at runtime. -->
		<_DarkEdif_DetectFusionDebuggerRegex><![CDATA[(?m)^\s*DarkEdif::FusionDebugger\s+FusionDebugger\s*;\s*$]]></_DarkEdif_DetectFusionDebuggerRegex>
		<DarkEdif_FusionDebugger Condition="$(SDKType)=='DarkEdif' AND $([System.Text.RegularExpressions.Regex]::IsMatch($(_ExtH), $(_DarkEdif_DetectFusionDebuggerRegex)))">1</DarkEdif_FusionDebugger>

		<!-- This define is true if SDKUpdater::RunUpdateNotifs() function is detected in Edittime.cpp -->
		<_DarkEdif_DetectUpdateCheckerRegex><![CDATA[(?m)^\s*DarkEdif::SDKUpdater::RunUpdateNotifs\s*\(]]></_DarkEdif_DetectUpdateCheckerRegex>
		<DarkEdif_UpdateChecker Condition="$(SDKType)=='DarkEdif' AND $(EditorBuild)==1 AND $([System.Text.RegularExpressions.Regex]::IsMatch($([System.IO.File]::ReadAllText('$(ProjectDir)\Edittime.cpp')), $(_DarkEdif_DetectUpdateCheckerRegex)))">1</DarkEdif_UpdateChecker>
	</PropertyGroup>
	<PropertyGroup Condition="$(SDKType.Contains('MMF2SDK'))" Label="UserMacros">
		<ExtVersion>1</ExtVersion>

		<_RCFile>$([System.IO.File]::ReadAllText('$(ProjectDir)\Ext.rc'))</_RCFile>

		<!-- Find the first Author line in RC file, read its value.
			 Starting "(?im)" sets regex matching to case-insensitive, multiline.
			 There is a final Replace to make ' turn into its arbitrary Unicode value,
			 so the preprocessor doesn't get puzzled while stringifying it. -->
		<_AuthorNameRegex><![CDATA[(?im)IDST_AUTHOR[ \t]+"([^\n]+)"\s*?$]]></_AuthorNameRegex>
		<AuthorName>$([System.Text.RegularExpressions.Regex]::Match($(_RCFile), $(_AuthorNameRegex)).Result('$1'))</AuthorName>

		<!-- Use Author Name if company isn't found -->
		<CompanyName>$(AuthorName)</CompanyName>

		<!-- Exception for MMF2SDK_Unicode, whose template is Simple Control.
			 Might change that later. -->
		<IsTemplate Condition="$(ProjectDir.ToLower().Contains('\mmf2sdk_unicode\simple control\'))">1</IsTemplate>
	</PropertyGroup>
	<PropertyGroup Condition="$(SDKType)=='RSDK'" Label="UserMacros">
		<ExtVersion>1</ExtVersion>

		<_InfoFile>$([System.IO.File]::ReadAllText('$(ProjectDir)\Information.h'))</_InfoFile>

		<_AuthorNameRegex><![CDATA[(?im)#define[ \t]+ObjectAuthor[ \t]+"([^\n]+)"\s*?$]]></_AuthorNameRegex>
		<AuthorName>$([System.Text.RegularExpressions.Regex]::Match($(_InfoFile), $(_AuthorNameRegex)).Result('$1'))</AuthorName>
		<CompanyName>$(AuthorName)</CompanyName>
	</PropertyGroup>
	<PropertyGroup Label="UserMacros" Condition="$(_TargetPlat)=='Windows'">
		<!-- Broken in latest MS
		<_FusionSDKAdds>/D "CONFIG=$(Configuration)" /D "PROJECT_NAME=\"$(ExtName)\""
			/D "AUTHOR_NAME=\"$(AuthorName)\"" /D "COMPANY_NAME=\"$(CompanyName)\""
			/D "EXTENSION_VERSION=$(ExtVersion)"
			/D "BUILD_DATE=\"$(BuildDate)\"" /D "YEAR=\"$(Year)\""
			/D "USE_DARKEDIF_UPDATE_CHECKER=$(DarkEdif_UpdateChecker)"
			/D "USE_DARKEDIF_FUSION_DEBUGGER=$(DarkEdif_FusionDebugger)"</_FusionSDKAdds> -->
		<!-- Do not include build date in the C++ compilation. It causes VS to think the whole
			 project needs rebuilding on every run. -->
		<_FusionSDKAdds>/D "CONFIG=$(Configuration)" /D "PROJECT_NAME=STRIFY($(ExtName))"
			/D "AUTHOR_NAME=STRIFY($(AuthorName))" /D "COMPANY_NAME=STRIFY($(CompanyName))"
			/D "EXTENSION_VERSION=$(ExtVersion)" /D "YEAR=STRIFY($(Year))"
			/D "USE_DARKEDIF_UPDATE_CHECKER=$(DarkEdif_UpdateChecker)"
			/D "USE_DARKEDIF_FUSION_DEBUGGER=$(DarkEdif_FusionDebugger)"
			/D "EditorBuild=$(EditorBuild)" /D "RuntimeBuild=$(RuntimeBuild)" /D "UniBuild=$(UniBuild)"</_FusionSDKAdds>
		<!-- ResourceCompiler doesn't like newlines. -->
		<_FusionSDKAdds>$(_FusionSDKAdds.Replace('\n',' ').Replace('\t',' '))</_FusionSDKAdds>
		<!-- #if EditorBuild needs to evaluate to true.
			 Worth noting in ResourceCompiler, "true" is not true. 1 is apparently true though. -->
		<_FusionSDKAddsRC>$(_FusionSDKAdds.Replace('\n',' ').Replace('\','\\\').Replace('STRIFY(','asStr(')) /D "BUILD_DATE=asStr($(BuildDate))"</_FusionSDKAddsRC>
	</PropertyGroup>
	<PropertyGroup Condition="$(_TargetPlat)=='Android' OR $(_TargetPlat)=='iOS'">
		<!-- Android uses Clang, a different format of commandline items
			-D PROJECT_NAME=\"$(ExtName)\"
			-D AUTHOR_NAME=\"$(AuthorName)\" -D "COMPANY_NAME=\"$(CompanyName)\"
			-D EXTENSION_VERSION=$(ExtVersion)
			-D BUILD_DATE=\"$(BuildDate)\" -D YEAR=\"$(Year)\"		-->
		<!-- Doesn't work due to MS bug.
		<_FusionSDKAdds>CONFIG=$(Configuration);PROJECT_NAME="$(ExtName)";AUTHOR_NAME="$(AuthorName)";COMPANY_NAME="$(CompanyName)";EXTENSION_VERSION=$(ExtVersion);YEAR="$(Year)"</_FusionSDKAdds> -->
		<_FusionSDKAdds>CONFIG=$(Configuration);PROJECT_NAME=STRIFY($(ExtName));AUTHOR_NAME=STRIFY($(AuthorName));COMPANY_NAME=STRIFY($(CompanyName));EXTENSION_VERSION=$(ExtVersion);YEAR=STRIFY($(Year));USE_DARKEDIF_FUSION_DEBUGGER=$(DarkEdif_FusionDebugger);EditorBuild=$(EditorBuild);RuntimeBuild=$(RuntimeBuild);UniBuild=$(UniBuild)</_FusionSDKAdds>
	</PropertyGroup>
	<Choose>
		<When Condition="$(_TargetPlat)=='Windows'">
			<PropertyGroup Label="UserMacros">
				<MFXDir Condition="$(EditorBuild)==1">$(SolutionDir)MFX\Extensions$(UnicodeOrBlank)</MFXDir>
				<MFXDir Condition="$(RuntimeBuild)==1">$(SolutionDir)MFX\Data\Runtime$(UnicodeOrBlank)</MFXDir>
				<MFXDir Condition="$(Configuration.StartsWith('Vitalize'))">$(SolutionDir)MOX</MFXDir>
			</PropertyGroup>
		</When>
		<When Condition="$(_TargetPlat)=='Android'">
			<PropertyGroup Label="UserMacros">
				<MFXDir>$(SolutionDir)MFX\Data\Runtime\Android</MFXDir>
			</PropertyGroup>
		</When>
		<When Condition="$(_TargetPlat)=='iOS'">
			<PropertyGroup Label="UserMacros">
				<MFXDir>$(SolutionDir)MFX\Data\Runtime\iOS</MFXDir>
			</PropertyGroup>
		</When>
	</Choose>
	<!-- All runtimes should have these -->
	<PropertyGroup>
		<!-- Only used in CLR (C# mixed with C++) -->
		<RootNamespace>$(SDKType)</RootNamespace>
		<!-- MFX files are internally DLLs -->
		<ConfigurationType Condition="$(_TargetPlat)!='iOS'">DynamicLibrary</ConfigurationType>

		<!-- TargetName is incorrect on MultiTargetSDK, due to project name containing '.' -->
		<TargetName>$(ExtName)$(LangSuffix)</TargetName>

		<!-- Prevent the madness of every linked DLL being copied to output folder. -->
		<CopyCppRuntimeToOutputDir>false</CopyCppRuntimeToOutputDir>

		<!-- Unfortunately, VS pushes all its runtime DLLs here, even in static library build.
			 May be a bug, but until it's fixed, we're gonna use the override of tags for MFX
			 and PDB below: namely, tags OutputFile, ProgramDatabaseFile, and StripPrivateSymbols. -->
		<OutDir>$(_FusionSDKTempDir)\</OutDir>
		<!-- Write all intermediate files here. -->
		<IntDir>$(_FusionSDKTempDir)\</IntDir>

		<!-- Minifies JSON file and builds call table for runtimes that lack A/C/E ASM -->
		<DarkEdifPreBuildToolParams>/ProjName="$(TargetName)" /TargetPlat="$(_TargetPlat)" /TargetArch="$(TargetArch)" /MacroInputFile="$(SDKRootFolder)\Lib\Shared\ACECallTable_Macro.cpp"  /MacroOutputFile="$(SolutionDir)\Temp\$(ExtName)\Temp_ACECallTable.cpp" /JSONInputPathToMinify="$(ProjectDir)\DarkExt.json"</DarkEdifPreBuildToolParams>
	</PropertyGroup>
	<!-- Worth noting a When cannot contain a ItemDefinitionGroup -->
	<ItemDefinitionGroup>
		<ClCompile>
			<!-- All configs, all platforms -->
			<!-- COXSDK is the general SDK term for all Fusion SDKs.
				 HWABETA is access to HWA stuff. It's been HWABETA since introduction.
				 Worth noting base SDK defines _WINDOWS, and rSDK additionally defines RSDK. -->
			<!-- Due to access to C stuff, there's plenty of complaints about risky behaviour -->
			<PreprocessorDefinitions>COXSDK;HWABETA;_CRT_SECURE_NO_WARNINGS;_CRT_SECURE_NO_DEPRECATE;%(PreprocessorDefinitions)</PreprocessorDefinitions>

			<!-- Indicates this is the SDK template. -->
			<PreprocessorDefinitions Condition="$(IsTemplate)==1">IS_$(SDKType.ToUpper())_TEMPLATE;%(PreprocessorDefinitions)</PreprocessorDefinitions>

			<!-- Debug or Edittime configs have EDITOR #defined -->
			<PreprocessorDefinitions Condition="$(EditorBuild)==1">EDITOR;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Runtime configs have RUN_ONLY #defined -->
			<PreprocessorDefinitions Condition="$(RuntimeBuild)==1">RUN_ONLY;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- non-Debug needs NDEBUG -->
			<PreprocessorDefinitions Condition="$(RelBuild)==1">NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>

			<PreprocessorDefinitions Condition="$(_TargetPlat)=='Android'">$(_FusionSDKAdds);$(PreprocessorDefinitions);%(PreprocessorDefinitions);</PreprocessorDefinitions>

			<!-- Not including ProjectDir causes includes of "Common.h" from the DarkEdif SDK to fail.
				 OpenCV's projects are in an addition layer of subfolders. -->
			<AdditionalIncludeDirectories>.\;$(SDKRootFolder)\Inc\$(_TargetPlat);$(SDKRootFolder)\Inc\Shared;$(SolutionDir)Temp\$(ExtName);$(SDKRootFolder)\Inc;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>

			<!-- C++ is king. -->
			<CompileAs>CompileAsCpp</CompileAs>
		</ClCompile>
	</ItemDefinitionGroup>


<!--#################################
		BEGIN Windows
	################################# -->
	<!-- Wish I could merge all these into a Choose,
		 but ItemDefinitionGroup can't be in a Choose. -->

	<PropertyGroup Condition="$(_TargetPlat)=='Windows'">
		<!-- Latest XP-compatible compiler.
			 While pre-XP may still run on XP compiler, it's dubious.
			 In a similar vein, the XP compiler may work on pre-XP, but also dubious. -->
		<PlatformToolset Condition="$(WindowsXPCompatibility)==1">v141_xp</PlatformToolset>
		<!-- Prevent Windows XP not-being-supported-later warnings -->
		<XPDeprecationWarning Condition="$(WindowsXPCompatibility)==1">false</XPDeprecationWarning>
		<MSBuildWarningsAsMessages Condition="$(WindowsXPCompatibility)==1">MSB8012</MSBuildWarningsAsMessages>

		<!-- If not XP, then use the latest compiler. $(PlatformToolsetVersion) is not available,
			 so the following "check for toolset" are copied from Microsoft.Cpp.Defaults.props;
			 v141 = VS 2017, v142 = VS 2019. Note v100 (VS 2010) is MS's default. -->
		<PlatformToolset Condition="$(PlatformToolset)=='v100' AND
			Exists('$(VCTargetsPath)\Platforms\Win32\PlatformToolsets\v142\Toolset.props')">v142</PlatformToolset>
		<PlatformToolset Condition="$(PlatformToolset)=='v100' AND
			Exists('$(VCTargetsPath)\Platforms\Win32\PlatformToolsets\v141\Toolset.props')">v141</PlatformToolset>

		<!-- MFX is reverted to DLL by MS's second VS property sheet, necessitating a AfterVSDefs props file. -->
		<TargetExt Condition="$(RunCodeAnalysis)!='true'">.mfx</TargetExt>
		<TargetExt Condition="$(RunCodeAnalysis)=='true'">.dll</TargetExt>

		<!-- UAC priviledges are based on app, not the DLLs that are Fusion MFX files. -->
		<GenerateManifest>false</GenerateManifest>

		<!-- Causes auto-defines of _UNICODE and so forth -->
		<CharacterSet Condition="$(UniBuild)==0">NotSet</CharacterSet>
		<CharacterSet Condition="$(UniBuild)==1">Unicode</CharacterSet>

		<!-- Instead of putting in output folder, put it here. -->
		<CodeAnalysisLogFile>$(IntDir)$(TargetFileName).CodeAnalysisLog.xml</CodeAnalysisLogFile>
        <CodeAnalysisSucceededFile>$(IntDir)$(TargetFileName).lastcodeanalysissucceeded</CodeAnalysisSucceededFile>
	</PropertyGroup>
	<ItemDefinitionGroup Condition="$(_TargetPlat)=='Windows'">
		<ClCompile>
			<!-- UTF-8 everywhere! -->
			<UseUnicodeForAssemblerListing>true</UseUnicodeForAssemblerListing>

			<!-- Old SDKs need this defined.
				 STRICT is also defined, but not seemingly used. -->
			<PreprocessorDefinitions Condition="$(SDKType)!='DarkEdif'">_WINDOWS;IN_EXT_VERSION2;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Windows XP needs manual defines. Was in MMFMasterHeader, but external libraries won't respect that. -->
			<PreprocessorDefinitions Condition="$(WindowsXPCompatibility)==1">_WIN32_WINNT=0x0501;WINVER=0x0501;%(PreprocessorDefinitions)</PreprocessorDefinitions>

			<!-- Max number of warnings without being asinine -->
			<WarningLevel>Level3</WarningLevel>
			<!-- Use C++ 2017 Standard (C++17) -->
			<LanguageStandard>stdcpp17</LanguageStandard>
			<!-- Use all processors during compilation. Not noticeable during multi-project building,
				 but matters when it's one project. -->
			<MultiProcessorCompilation Condition="$(_UseMultiProcessor)==1">true</MultiProcessorCompilation>

			<!-- Define PROJECT_NAME for use in DLL metadata. Unfortunately, we don't know company name.
				 Can't do it in PreprocessorDefinitions, it doesn't like projects with spaces in their
				 name.
				 Also, make __cplusplus represent the C++ standard for MSVC. -->
			<AdditionalOptions>$(_FusionSDKAdds) /Zc:__cplusplus %(AdditionalOptions)</AdditionalOptions>
		</ClCompile>
		<Link>
			<!-- Windows subsystem. Required to prevent a warning message -->
			<SubSystem>Windows</SubSystem>
			<!-- MFX file needs redirecting. -->
			<OutputFile>$(MFXDir)\$(TargetName)$(TargetExt)</OutputFile>

			<!-- Debug symbols: first, the full debug symbols with all code. -->
			<ProgramDatabaseFile Condition="$(MakePDB)==1">$(MFXDir)\$(TargetName)_Full.pdb</ProgramDatabaseFile>
			<!-- Next, stripped debug symbols with just function names/addresses.
				 Good for releasing to developers without releasing code. -->
			<StripPrivateSymbols Condition="$(MakePDB)==1">$(MFXDir)\$(TargetName).pdb</StripPrivateSymbols>

			<!-- Customise the amount of detail in the non-stripped PDB. -->
			<!-- Full debug is for sharing/publishing -->
			<GenerateDebugInformation Condition="$(MakePDB)==1 AND $(DbgBuild)==0">DebugFull</GenerateDebugInformation>
			<!-- This one is bulkier, but faster to make and better for local debug -->
			<GenerateDebugInformation Condition="$(MakePDB)==1 AND $(DbgBuild)==1">true</GenerateDebugInformation>

			<!-- Support up to 4GB RAM addresses, not 2GB -->
			<LargeAddressAware>true</LargeAddressAware>

			<!-- Add the Fusion library.
				 The one that's 325kb comes with CF2.5 SDK, but works in Fusion 2.0 through 2.5
				 Includes HWA features, plus both ANSI and Unicode functions.
				 Worth noting wchar_t it uses is type unsigned short, not __wchar_t.
				 VS allows use of ushort via /Zc:wchar_t, but it causes failure to link with
				 correct wchar_t linking libraries. -->
			<AdditionalDependencies Condition="$(SDKType)=='DarkEdif'">$(SDKRootFolder)\Lib\Windows\mmfs2.lib;%(AdditionalDependencies)</AdditionalDependencies>
			<AdditionalDependencies Condition="$(SDKType)!='DarkEdif'">$(SDKRootFolder)\Lib\mmfs2.lib;%(AdditionalDependencies)</AdditionalDependencies>

			<!-- This moves the generated .lib and .exp outside the MFX folder. We don't need these
				 files at all, but .exp can't be turned off. -->
			<ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>

			<!-- We can turn off the .lib though. -->
			<AdditionalOptions>/NOIMPLIB %(AdditionalOptions)</AdditionalOptions>
		</Link>
		<ResourceCompile>
			<!-- Important. Used to be defined by CCX.h -->
			<PreprocessorDefinitions>KPX_MAGICNUMBER=200;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Debug or Edittime configs have EDITOR #defined -->
			<PreprocessorDefinitions Condition="$(EditorBuild)==1">EDITOR;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Runtime configs have RUN_ONLY #defined -->
			<PreprocessorDefinitions Condition="$(RuntimeBuild)==1">RUN_ONLY;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Edittime or Runtime needs NDEBUG -->
			<PreprocessorDefinitions Condition="$(RelBuild)==1">NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Define PROJECT_NAME for use in DLL metadata. Unfortunately, we don't know company name.
				 Can't do it in PreprocessorDefinitions, it doesn't like projects with spaces in their
				 name. -->
			<AdditionalOptions>$(_FusionSDKAddsRC) %(AdditionalOptions)</AdditionalOptions>

			<!-- Allow #include to pull, first from platform-specific Inc, then Shared Inc -->
			<AdditionalIncludeDirectories>$(SDKRootFolder)/$(_TargetPlat)/Inc;$(SDKRootFolder)/Shared/Inc;$(SDKRootFolder)/Inc;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
		</ResourceCompile>
	</ItemDefinitionGroup>

	<!-- Windows: configuration type -->

	<!-- ## Debug, Debug Unicode -->
	<PropertyGroup Condition="$(_TargetPlat)=='Windows' AND $(DbgBuild)==1">
		<!-- Enables EditAndContinue, devs can modify functions mid-debug session -->
		<LinkIncremental Condition="$(_UseMultiProcessor)==0">true</LinkIncremental>
	</PropertyGroup>
	<ItemDefinitionGroup Condition="$(_TargetPlat)=='Windows' AND $(DbgBuild)==1">
		<ClCompile>
			<!-- Make debugging more accurate -->
			<RuntimeLibrary Condition="$(FavorSizeOrSpeed)!='size_redist'">MultiThreadedDebug</RuntimeLibrary>
			<RuntimeLibrary Condition="$(FavorSizeOrSpeed)=='size_redist'">MultiThreadedDebugDll</RuntimeLibrary>
			<RuntimeTypeInfo>true</RuntimeTypeInfo>
			<Optimization>Disabled</Optimization>
			<!-- Turn on all checks for simple mistakes -->
			<BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
			<!-- This is enabled by debug anyway, but to make it explicit on the property page -->
			<BufferSecurityCheck>true</BufferSecurityCheck>
			<!-- Adds extra checks to prevent running non-function code as if it was a function -->
			<ControlFlowGuard>Guard</ControlFlowGuard>
			<!-- Allow user to edit their code mid-debug, only possible if not multiprocessor -->
			<DebugInformationFormat Condition="$(_UseMultiProcessor)==0">EditAndContinue</DebugInformationFormat>
			<DebugInformationFormat Condition="$(_UseMultiProcessor)==1">ProgramDatabase</DebugInformationFormat>
			<!-- Enable COMDATs, necessary for Edit and Continue debugging -->
			<FunctionLevelLinking>true</FunctionLevelLinking>
		</ClCompile>
		<Link>
			<!-- Required for incremental linking to work. -->
			<AdditionalOptions Condition="$(_UseMultiProcessor)==0">/SAFESEH:NO %(AdditionalOptions)</AdditionalOptions>
		</Link>
	</ItemDefinitionGroup>
	<!-- ## Edittime, Edittime Unicode, Runtime, Runtime Unicode -->
	<PropertyGroup Condition="$(_TargetPlat)=='Windows' AND $(DbgBuild)==0">
		<!-- Link Time Code Generation. See the same property under ClCompile. -->
		<WholeProgramOptimization Condition="$(UseLinkTimeCodeGeneration)==1">true</WholeProgramOptimization>
	</PropertyGroup>
	<ItemDefinitionGroup Condition="$(_TargetPlat)=='Windows' AND $(DbgBuild)==0">
		<ClCompile>
			<RuntimeLibrary Condition="$(FavorSizeOrSpeed)!='size_redist'">MultiThreaded</RuntimeLibrary>
			<RuntimeLibrary Condition="$(FavorSizeOrSpeed)=='size_redist'">MultiThreadedDll</RuntimeLibrary>

			<!-- Link Time Code Generation; allows a thorough optimisation after compilation,
				 by doing the optimisation process when all compiled files can be inspected. -->
			<WholeProgramOptimization Condition="$(UseLinkTimeCodeGeneration)==1">true</WholeProgramOptimization>
			<!-- LTCG optimisation type -->
			<FavorSizeOrSpeed Condition="$(UseLinkTimeCodeGeneration)==1">$(FavorSizeOrSpeed)</FavorSizeOrSpeed>
			<!-- Replace functions with direct ASM where possible -->
			<IntrinsicFunctions Condition="$(FavorSizeOrSpeed)=='speed'">true</IntrinsicFunctions>
			<!-- Moves all texts in the program to a single section, removing overlaps, to improve size -->
			<StringPooling>true</StringPooling>
			<!-- No checks, we want speed -->
			<BufferSecurityCheck>false</BufferSecurityCheck>
			<!-- Optimise favouring a smaller size over faster speed, if set to -->
			<Optimization Condition="$(FavorSizeOrSpeed.StartsWith('size'))">MinSpace</Optimization>
			<!-- Speed is preferred over size; note VS 2017 does not support Ob3. -->
			<AdditionalOptions Condition="$(FavorSizeOrSpeed)=='speed' AND $(PlatformToolset)!='v141'">/Ob3 %(AdditionalOptions)</AdditionalOptions>
			<InlineFunctionExpansion Condition="$(FavorSizeOrSpeed)=='speed' AND $(PlatformToolset)=='v141'">AnySuitable</InlineFunctionExpansion>
			<InlineFunctionExpansion Condition="$(FavorSizeOrSpeed.StartsWith('size'))">OnlyExplicitInline</InlineFunctionExpansion>
		</ClCompile>
		<Link>
			<!-- Removes unused functions, can't be used in debug due to Incremental -->
			<OptimizeReferences>true</OptimizeReferences>
			<!-- Required for Link Time Code Generation to work -->
			<EnableCOMDATFolding Condition="$(UseLinkTimeCodeGeneration)==1">true</EnableCOMDATFolding>
		</Link>
	</ItemDefinitionGroup>

<!--#################################
		END Windows
		BEGIN Android
	################################# -->
	<PropertyGroup Label="Configuration" Condition="$(_TargetPlat)=='Android'">
		<!-- Debug libraries on Debug config -->
		<UseDebugLibraries>false</UseDebugLibraries>
		<UseDebugLibraries Condition="$(DbgBuild)==1">true</UseDebugLibraries>
		<!-- Clang 5.0 is latest VS can use. 9.0 is the most recent. -->
		<PlatformToolset>Clang_5_0</PlatformToolset>
		<!-- Use LLVM Static C++ Runtime library. It's the only one supported by Google,
			 the GNU STL is second-best but doesn't play nice all the time.
			 https://www.phoronix.com/scan.php?page=news_item&px=Android-NDK-r16 -->
		<UseOfStl>c++_static</UseOfStl>
		<!-- Generate ARM style code for Thumb archs. -->
		<ThumbMode Condition="'$(Platform)'=='ARM'">ARM</ThumbMode>
		<!-- API that's readily accessible. Note 21 is minimum 64-bit API.
			 Note that this does not really affect app compatibility one-to-one;
			 but if you do modify the API, you should probably add checks and
			 warnings, maybe before dlopen() in the Java file. -->
		<AndroidAPILevel>android-19</AndroidAPILevel>
		<AndroidAPILevel Condition="'$(Platform)'=='ARM64' OR '$(Platform)'=='x64'">android-21</AndroidAPILevel>

		<!-- Android can use SDK 21/22 in latest preview, but the default Android.Tools.props file included with
			Visual Studio won't look for it. So, if you modify that file, let's check it's smart enough to use it. -->
		<DarkNDKVersion>$(VS_NdkRoot.Substring($([MSBuild]::Add(1,$(VS_NdkRoot64.LastIndexOf('-'))))))</DarkNDKVersion>
		<!-- r21e is slightly broken, and tries to build with ARMv4 if left as arm-linux-androideabi. -->
		<AndroidHeaderTriple Condition="'$(DarkNDKVersion)'=='r21e' AND '$(Platform)'=='ARM'">armv7a-linux-androideabi</AndroidHeaderTriple>

		<!-- Enables use of premature NDKs; that is, NDKs that don't come with VS and must be manually installed. -->
		<DARKEDIF_USE_PREMATURE_NDK>0</DARKEDIF_USE_PREMATURE_NDK>

		<!-- To move the compiled SO file into the Data\Runtime\Android zip file. -->
		<DarkEdifPostBuildToolParams>/ProjName="$(TargetName)" /TargetArch="$(TargetArchABI)" /InputSOFolder="$(OutDir)" /OutputDir="$(MFXDir)" /ProjectDir="$(ProjectDir)"</DarkEdifPostBuildToolParams>
	</PropertyGroup>
	<ItemDefinitionGroup Label="Configuration" Condition="$(_TargetPlat)=='Android'">
		<ClCompile>
			<!-- Don't need it. -->
			<AdditionalIncludeDirectories>$(Sysroot)\usr\include;$(StlIncludeDirectories);$(AdditionalIncludeDirectories);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
			<!-- Use C++17, and C11, latest finalised standards. -->
			<CppLanguageStandard>c++1z</CppLanguageStandard>
			<CLanguageStandard>c11</CLanguageStandard>
			<!-- Allows debugging. -->
			<ExceptionHandling>UnwindTables</ExceptionHandling>
			<!-- RTTI is requested by Fusion. -->
			<RuntimeTypeInfo>true</RuntimeTypeInfo>
			<!-- -->
			<FunctionLevelLinking>true</FunctionLevelLinking>
			<!-- Data sections -->
			<DataLevelLinking>true</DataLevelLinking>
			<!-- Don't export any functions by default, as Java doesn't need to see them. -->
			<AdditionalOptions>-fvisibility=hidden %(AdditionalOptions)</AdditionalOptions>
			<!-- AndroidHeaderTriple will incorrectly be arm-linux-androidabi,
				which defaults it to armv4, causing compiler issues. You want armv7-linux-androidabi.
				You can edit it in C:\Program Files (x86)\Microsoft Visual Studio\2019\Preview\MSBuild
				\Microsoft\VC\v160\Application Type\Android\3.0\Platforms\ARM\Platform.Default.props,
				or add -target armv7-linux-androidabi. -->
		</ClCompile>
		<Link>
			<VerboseOutput>false</VerboseOutput>
			<OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>

			<!-- Include math library (libm.so). -->
			<LibraryDependencies>$(StlLibraryName);m;%(LibraryDependencies)</LibraryDependencies>
			<!-- Include android_support library for x86 and ARM (available in x86/ARM constantly, but only in ARM64/x64 for NDK17 and lower) -->
			<LibraryDependencies Condition="'$(NDKVersion)' &lt; '17.0'">$(StlLibraryName);android_support;%(LibraryDependencies)</LibraryDependencies>
			<!-- This SO static object file will be moved by the DarkEdifPostBuildTool. -->
			<IncrementalLink>false</IncrementalLink>
		</Link>
	</ItemDefinitionGroup>

<!--#################################
		END Android
		BEGIN iOS
	################################# -->
	<PropertyGroup Condition="$(_TargetPlat)=='iOS'">
		<!-- Always static -->
		<ConfigurationType>StaticLibrary</ConfigurationType>
		<iOSConfigurationType>StaticLibrary</iOSConfigurationType>
		<!-- Debug libraries on Debug config -->
		<UseDebugLibraries>false</UseDebugLibraries>
		<UseDebugLibraries Condition="$(DbgBuild)=='Y'">true</UseDebugLibraries>
		<!-- Most recent supported -->
		<PlatformToolset>XCode_6_1</PlatformToolset>
		<!-- libSTDc++ was deprecated ages ago, and is not available on watchOS or tvOS. -->
		<UseOfStl>libc++</UseOfStl>
	</PropertyGroup>

	<ItemDefinitionGroup Condition="'$(_TargetPlat)'=='iOS'">
		<ClCompile>
			<PrecompiledHeader>NotUsing</PrecompiledHeader>
			<!-- <AdditionalIncludeDirectories>$(AdditionalIncludeDirectories);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>-->
			<PreprocessorDefinitions>__APPLE__;PLATFORM=1;%(PreprocessorDefinitions)</PreprocessorDefinitions>
			<!-- Use C++17, and C11, latest finalised standards. -->
			<CppLanguageStandard>c++17</CppLanguageStandard>
			<CLanguageStandard>c11</CLanguageStandard>
			<!-- We need C++ exception handling. -->
			<ExceptionHandling>Enabled</ExceptionHandling>
		</ClCompile>
	</ItemDefinitionGroup>

	<ItemDefinitionGroup Condition="$(_TargetPlat)=='iOS' AND $(DbgBuild)!=''">
		<ClCompile>
			<RuntimeTypeInfo>true</RuntimeTypeInfo>
			<GenerateDebugSymbols>true</GenerateDebugSymbols>
			<DebugInformationLevel>Default</DebugInformationLevel>
			<LinkTimeOptimization Condition="$(LTCG)=='Y'">true</LinkTimeOptimization>
		</ClCompile>
	</ItemDefinitionGroup>


	<!-- All runtimes -->
	<ItemGroup>
		<!-- Forwards the macros calculated above to the build process -->
		<BuildMacro Include="MFXDir">
			<Value>$(MFXDir)</Value>
		</BuildMacro>
		<BuildMacro Include="UnicodeOrBlank">
			<Value>$(UnicodeOrBlank)</Value>
		</BuildMacro>
		<BuildMacro Include="UniBuild">
			<Value>$(UniBuild)</Value>
		</BuildMacro>
		<BuildMacro Include="ExtName">
			<Value>$(ExtName)</Value>
		</BuildMacro>
		<BuildMacro Include="CompanyName">
			<Value>$(CompanyName)</Value>
		</BuildMacro>
		<BuildMacro Include="Year">
			<Value>$(Year)</Value>
		</BuildMacro>
		<BuildMacro Include="MakePDB">
			<Value>$(MakePDB)</Value>
		</BuildMacro>
		<BuildMacro Include="_FusionSDKAdds">
			<Value>$(_FusionSDKAdds)</Value>
		</BuildMacro>
		<BuildMacro Include="_TargetPlat">
			<Value>$(_TargetPlat)</Value>
		</BuildMacro>
		<BuildMacro Include="IsTemplate">
			<Value>$(IsTemplate)</Value>
		</BuildMacro>
		<BuildMacro Include="SDKType">
			<Value>$(SDKType)</Value>
		</BuildMacro>
		<BuildMacro Include="RunAnalyzerSetting">
			<Value>$(RunAnalyzerSetting)</Value>
		</BuildMacro>
	</ItemGroup>

	<!-- Pre build tool for non-Windows. Minifies JSON, and generates a jump function list based on ACE in the Extension. -->
	<Target Name="Generate jump table" Condition="$(SDKType)=='DarkEdif' AND $(RuntimeBuild)==1" BeforeTargets="ClCompile">
		<Message Text="Minifying JSON and checking that ASM/jump table exists for this platform..." Importance="High" />
		<Exec Command="&quot;$(SDKRootFolder)\DarkEdifPreBuildTool.exe&quot; $(DarkEdifPreBuildToolParams)" />
		<Message Text="=========================" Importance="High" />
	</Target>

	<!-- Delete output PDB files; they'll either be regenerated by the current build,
		 or they're leftover from the last build config and invalid; e.g. if user does a
		 Debug build then Edittime build, that will result in PDBs that are not applicable
		 to the Edittime build but still in the MFX\Extensions folder. -->
	<Target Name="Delete old PDBs" Condition="$(_TargetPlat)=='Windows'" BeforeTargets="ResourceCompile">
		<Delete Files="$(MFXDir)\$(TargetName).pdb" />
		<Delete Files="$(MFXDir)\$(TargetName)_Full.pdb" />
	</Target>

	<!-- Post build tool for non-Windows. Copies built SO into ZIP in MFX\Data\Runtime. -->
	<Target Name="Copy SO files into ZIP" Condition="$(SDKType)=='DarkEdif' AND $(_TargetPlat)=='Android'" AfterTargets="Build">
      <Message Text="Copying the built SO into a ZIP file inside MFX\Data\Runtime..." Importance="High" />
	  <Exec Command="&quot;$(SDKRootFolder)\DarkEdifPostBuildTool.exe&quot; $(DarkEdifPostBuildToolParams)" />
    </Target>

	<!-- Writes FusionSDK.props debugging info, usually ext devs should not need this. -->
	<Target Name="For debugging" Condition="$(EchoAllDefinesFromPropsFileDuringBuild)==1" BeforeTargets="ResourceCompile;Compile;Build;BeforeBuild">
		<Message Text="=========================" Importance="High" />
		<Message Text="Echoing #defines from FusionSDK.props:" Importance="High" />
		<Message Text="_FusionSDKAdds = [$(_FusionSDKAdds)]" Importance="High" />
		<Message Text="_FusionSDKAddsRC = [$(_FusionSDKAddsRC)]" Importance="High" />
		<Message Text="=========================" Importance="High" />
	</Target>
</Project>

